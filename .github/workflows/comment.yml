name: PR Comment Bot

on:
  # This specifies that the workflow should trigger on pull_request events.
  pull_request:
    # We only want to run this when a pull request is first opened.
    # types: [opened]

    # For testing purpose, check it once the PR is opened.
    branches:
      - main
    
  workflow_dispatch:

jobs:
  Comment-on-PR:
    runs-on: ubuntu-latest

    # This gives the action the necessary permissions to write a comment on the pull request.
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add comment to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            // Get the pull request number from the event context
            const issue_number = context.issue.number;

            // Create a patch file containing all changes
            try {
              execSync(`git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > changes.patch`);
            } catch (error) {
              console.log('Error creating git diff:', error.message);
              // Try alternative method
              try {
                execSync(`git diff HEAD~1 HEAD > changes.patch`);
                console.log('Used HEAD~1 HEAD as fallback for git diff');
              } catch (fallbackError) {
                console.log('Fallback git diff also failed:', fallbackError.message);
                return;
              }
            }
            
            // Read the patch file content
            let patchContent = '';
            try {
              patchContent = fs.readFileSync('changes.patch', 'utf8');
              console.log('Patch content:', patchContent);
            } catch (error) {
              console.log('Error reading patch file:', error);
              patchContent = 'No changes detected or error reading patch file.';
            }

            // Check if the patch file is empty
            if (!patchContent || patchContent.trim() === '') {
              console.log("No content changes detected.");
              return;
            }

            const apiUrl = 'https://4djfomzutg.execute-api.us-west-2.amazonaws.com/v1/api';
            console.log(`Calling API: ${apiUrl}`);
            
            const headers = {
              'Content-Type': 'application/json',
              'x-api-key': 'ojR4WdbesL8l3pXNhsBlVau1FwBq5u9i1WL1nA16' 
            };

            const body = {
              "user_id": "ftsai", 
              "prompts": [`How are you? How can i help you?`],
              "model": "ollama.deepseek-r1:latest"
            }

            console.log(`Calling API: ${apiUrl}`);
            
            const response = await fetch(apiUrl, {
              method: 'POST',
              headers: headers,
              body: JSON.stringify(body)
            });
            const data = await response.json();
            
            console.log('data received')
            console.log(data)

            // Post a comment on the pull request

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: data.response
            });
